{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/bluetooth-serial/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @name Bluetooth Serial\n * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino (not Android to Android or iOS to iOS).\n * @usage\n * ```typescript\n * import { BluetoothSerial } from '@ionic-native/bluetooth-serial';\n *\n * constructor(private bluetoothSerial: BluetoothSerial) { }\n *\n *\n * // Write a string\n * this.bluetoothSerial.write('hello world').then(success, failure);\n *\n * // Array of int or bytes\n * this.bluetoothSerial.write([186, 220, 222]).then(success, failure);\n *\n * // Typed Array\n * var data = new Uint8Array(4);\n * data[0] = 0x41;\n * data[1] = 0x42;\n * data[2] = 0x43;\n * data[3] = 0x44;\n * this.bluetoothSerial.write(data).then(success, failure);\n *\n * // Array Buffer\n * this.bluetoothSerial.write(data.buffer).then(success, failure);\n * ```\n */\n@Plugin({\n  pluginName: 'BluetoothSerial',\n  repo: 'https://github.com/don/BluetoothSerial',\n  plugin: 'cordova-plugin-bluetooth-serial',\n  pluginRef: 'bluetoothSerial',\n  platforms: ['Android', 'iOS', 'Windows Phone 8']\n})\n@Injectable()\nexport class BluetoothSerial extends IonicNativePlugin {\n\n  /**\n   * Connect to a Bluetooth device\n   * @param {string} macAddress_or_uuid Identifier of the remote device\n   * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'disconnect'\n  })\n  connect(macAddress_or_uuid: string): Observable<any> { return; }\n\n  /**\n   * Connect insecurely to a Bluetooth device\n   * @param {string} macAddress Identifier of the remote device\n   * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\n   */\n  @Cordova({\n    platforms: ['Android'],\n    observable: true,\n    clearFunction: 'disconnect'\n  })\n  connectInsecure(macAddress: string): Observable<any> { return; }\n\n  /**\n   * Disconnect from the connected device\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  disconnect(): Promise<any> { return; }\n\n  /**\n   * Writes data to the serial port\n   * @param {any} data ArrayBuffer of data\n   * @returns {Promise<any>} returns a promise when data has been written\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  write(data: any): Promise<any> { return; }\n\n  /**\n   * Gets the number of bytes of data available\n   * @returns {Promise<any>} returns a promise that contains the available bytes\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  }) available(): Promise<any> { return; }\n\n  /**\n   * Reads data from the buffer\n   * @returns {Promise<any>} returns a promise with data from the buffer\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  read(): Promise<any> { return; }\n\n  /**\n   * Reads data from the buffer until it reaches a delimiter\n   * @param {string} delimiter string that you want to search until\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  readUntil(delimiter: string): Promise<any> { return; }\n\n  /**\n   * Subscribe to be notified when data is received\n   * @param {string} delimiter the string you want to watch for\n   * @returns {Observable<any>} returns an observable.\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'unsubscribe'\n  })\n  subscribe(delimiter: string): Observable<any> { return; }\n\n  /**\n   * Subscribe to be notified when data is received\n   * @returns {Observable<any>} returns an observable\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'unsubscribeRawData'\n  })\n  subscribeRawData(): Observable<any> { return; }\n\n  /**\n   * Clears data in buffer\n   * @returns {Promise<any>} returns a promise when completed\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  clear(): Promise<any> { return; }\n\n  /**\n   * Lists bonded devices\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  list(): Promise<any> { return; }\n\n  /**\n   * Reports if bluetooth is enabled\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  isEnabled(): Promise<any> { return; }\n\n  /**\n   * Reports the connection status\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  isConnected(): Promise<any> { return; }\n\n  /**\n   * Reads the RSSI from the connected peripheral\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  readRSSI(): Promise<any> { return; }\n\n  /**\n   * Show the Bluetooth settings on the device\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  showBluetoothSettings(): Promise<any> { return; }\n\n  /**\n   * Enable Bluetooth on the device\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  enable(): Promise<any> { return; }\n\n  /**\n   * Discover unpaired devices\n   * @returns {Promise<any>} returns a promise\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone']\n  })\n  discoverUnpaired(): Promise<any> { return; }\n\n  /**\n   * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.\n   * @returns {Observable<any>} Returns an observable\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS', 'Windows Phone'],\n    observable: true,\n    clearFunction: 'clearDeviceDiscoveredListener'\n  })\n  setDeviceDiscoveredListener(): Observable<any> { return; }\n\n  /**\n   * Sets the human readable device name that is broadcasted to other devices\n   * @param {string} newName Desired name of device\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true\n  })\n  setName(newName: string): void { }\n\n  /**\n   * Makes the device discoverable by other devices\n   * @param {number} discoverableDuration Desired number of seconds device should be discoverable for\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true\n  })\n  setDiscoverable(discoverableDuration: number): void { }\n\n}\n"]}